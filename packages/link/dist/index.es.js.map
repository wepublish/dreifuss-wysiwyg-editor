{"version":3,"file":"index.es.js","sources":["../src/defaults.ts","../src/getLinkDeserialize.ts","../src/transforms/wrapLink.ts","../src/transforms/upsertLinkAtSelection.ts","../src/withLink.ts","../src/utils.ts","../src/transforms/onKeyDown.ts","../src/createLinkPlugin.ts"],"sourcesContent":["import {PlatePluginOptions} from '@udecode/plate-core'\n\nexport const ELEMENT_LINK = 'link'\n\nexport const DEFAULTS_LINK: Partial<PlatePluginOptions> = {\n  getNodeProps: ({element}) => ({url: element?.url})\n}\n","import {getNodeDeserializer} from '@udecode/plate-common'\nimport {Deserialize, getPlatePluginOptions} from '@udecode/plate-core'\nimport {ELEMENT_LINK} from './defaults'\n\nexport const getLinkDeserialize = (): Deserialize => editor => {\n  const options = getPlatePluginOptions(editor, ELEMENT_LINK)\n\n  return {\n    element: getNodeDeserializer({\n      type: options.type,\n      getNode: el => ({\n        type: options.type,\n        url: el.getAttribute('href')\n      }),\n      rules: [{nodeNames: 'A'}],\n      ...options.deserialize\n    })\n  }\n}\n","import {wrapNodes} from '@udecode/plate-common'\nimport {getPlatePluginType, SPEditor} from '@udecode/plate-core'\nimport {Location} from 'slate'\nimport {ELEMENT_LINK} from '../defaults'\n\n/**\n * Wrap selected nodes with a link and collapse at the end.\n */\nexport const wrapLink = (editor: SPEditor, {at, url}: {url: string; at?: Location}) => {\n  wrapNodes(\n    editor,\n    {\n      type: getPlatePluginType(editor, ELEMENT_LINK),\n      url,\n      children: []\n    },\n    {at, split: true}\n  )\n}\n","import {insertNodes, isCollapsed, unwrapNodes} from '@udecode/plate-common'\nimport {getPlatePluginType, SPEditor, TElement} from '@udecode/plate-core'\nimport {Editor, Transforms} from 'slate'\nimport {ELEMENT_LINK} from '../defaults'\nimport {wrapLink} from './wrapLink'\n\n/**\n * Unwrap link at a location (default: selection).\n * Then, the focus of the location is set to selection focus.\n * Then, wrap the link at the location.\n */\nexport const upsertLinkAtSelection = (\n  editor: SPEditor,\n  {\n    url,\n    wrap,\n    selection\n  }: {\n    url: string\n    /**\n     * If true, wrap the link at the location (default: selection) even if the selection is collapsed.\n     */\n    wrap?: boolean\n    selection?: any\n  }\n) => {\n  if (!selection) return\n\n  const type = getPlatePluginType(editor, ELEMENT_LINK)\n\n  if (!wrap && isCollapsed(selection)) {\n    return insertNodes<TElement>(editor, {\n      type,\n      url,\n      children: [{text: url}]\n    })\n  }\n\n  // if our cursor is inside an existing link, but don't have the text selected, select it now\n  if (wrap && isCollapsed(selection)) {\n    const linkLeaf = Editor.leaf(editor, selection)\n    const [, inlinePath] = linkLeaf\n    Transforms.select(editor, inlinePath)\n  }\n\n  unwrapNodes(editor, {at: selection, match: {type}})\n\n  wrapLink(editor, {at: selection, url})\n\n  Transforms.collapse(editor, {edge: 'end'})\n}\n\nexport function removeLink(editor: SPEditor) {\n  if (!editor.selection) return null\n  const type = getPlatePluginType(editor, ELEMENT_LINK)\n\n  unwrapNodes(editor, {\n    at: editor.selection,\n    match: {type}\n  })\n}\n","import {\n  getRangeBefore,\n  getRangeFromBlockStart,\n  getText,\n  isCollapsed,\n  isUrl as isUrlProtocol,\n  someNode,\n  unwrapNodes\n} from '@udecode/plate-common'\nimport {getPlatePluginType, SPEditor, WithOverride} from '@udecode/plate-core'\nimport {withRemoveEmptyNodes} from '@udecode/plate-normalizers'\nimport {Range} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport {upsertLinkAtSelection} from './transforms/upsertLinkAtSelection'\nimport {wrapLink} from './transforms/wrapLink'\nimport {ELEMENT_LINK} from './defaults'\nimport {WithLinkOptions} from './types'\n\nconst upsertLink = (\n  editor: SPEditor,\n  {\n    url,\n    at\n  }: {\n    url: string\n    at: Range\n  }\n) => {\n  unwrapNodes(editor, {\n    at,\n    match: {type: getPlatePluginType(editor, ELEMENT_LINK)}\n  })\n\n  const newSelection = editor.selection as Range\n\n  wrapLink(editor, {\n    at: {\n      ...at,\n      focus: newSelection.focus\n    },\n    url\n  })\n}\n\nconst upsertLinkIfValid = (editor: SPEditor, {isUrl}: {isUrl: any}) => {\n  const rangeFromBlockStart = getRangeFromBlockStart(editor)\n  const textFromBlockStart = getText(editor, rangeFromBlockStart)\n\n  if (rangeFromBlockStart && isUrl(textFromBlockStart)) {\n    upsertLink(editor, {url: textFromBlockStart, at: rangeFromBlockStart})\n    return true\n  }\n}\n\n/**\n * Insert space after a url to wrap a link.\n * Lookup from the block start to the cursor to check if there is an url.\n * If not found, lookup before the cursor for a space character to check the url.\n *\n * On insert data:\n * Paste a string inside a link element will edit its children text but not its url.\n *\n */\nexport const withLink =\n  ({\n    isUrl = isUrlProtocol,\n    rangeBeforeOptions = {\n      matchString: ' ',\n      skipInvalid: true,\n      afterMatch: true,\n      multiPaths: true\n    }\n  }: WithLinkOptions = {}): WithOverride<ReactEditor & SPEditor> =>\n  editor => {\n    const {insertData, insertText} = editor\n\n    const type = getPlatePluginType(editor, ELEMENT_LINK)\n\n    editor.insertText = text => {\n      if (text === ' ' && isCollapsed(editor.selection)) {\n        const selection = editor.selection as Range\n\n        if (upsertLinkIfValid(editor, {isUrl})) {\n          return insertText(text)\n        }\n\n        const beforeWordRange = getRangeBefore(editor, selection, rangeBeforeOptions)\n\n        if (beforeWordRange) {\n          const beforeWordText = getText(editor, beforeWordRange)\n\n          if (isUrl(beforeWordText)) {\n            upsertLink(editor, {url: beforeWordText, at: beforeWordRange})\n          }\n        }\n      }\n\n      insertText(text)\n    }\n\n    editor.insertData = (data: DataTransfer) => {\n      const text = data.getData('text/plain')\n\n      if (text) {\n        if (someNode(editor, {match: {type}})) {\n          return insertText(text)\n        }\n\n        if (isUrl(text)) {\n          return upsertLinkAtSelection(editor, {url: text})\n        }\n      }\n\n      insertData(data)\n    }\n\n    // editor.insertBreak = () => {\n    //   if (upsertLinkIfValid(editor, { link, isUrl })) {\n    //     console.info('fix cursor');\n    //   }\n    //\n    //   insertBreak();\n    // };\n\n    editor = withRemoveEmptyNodes({type})(editor)\n\n    return editor\n  }\n","export async function validateUrl(url: string) {\n  if (!url) return false\n\n  const pattern = new RegExp(\n    '^(https?:\\\\/\\\\/)?' + // protocol\n      '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n      '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n      '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n      '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n      '(\\\\#[-a-z\\\\d_]*)?$',\n    'i'\n  )\n  return pattern.test(url)\n}\n","import {ELEMENT_LINK} from '../defaults'\nimport {verifyHotkey, getPluginHotkey, getClipboardText} from '@dreifuss-wysiwyg-editor/common'\nimport {upsertLinkAtSelection} from '../transforms'\nimport {validateUrl} from '../utils'\n\nexport const onKeyDown =\n  (editor: any): any =>\n  async (event: any) => {\n    if (!editor) return\n\n    const hotKey = getPluginHotkey(editor, ELEMENT_LINK)\n\n    if (!hotKey) return\n\n    if (verifyHotkey(event, hotKey)) {\n      const url = await getClipboardText()\n\n      if (!url) return\n\n      validateUrl(url).then((isValid: boolean) => {\n        if (isValid) {\n          upsertLinkAtSelection(editor, {\n            url,\n            selection: editor.selection,\n            wrap: true\n          })\n        }\n      })\n    }\n  }\n","import {getRenderElement, getPlatePluginTypes, PlatePlugin} from '@udecode/plate-core'\nimport {ELEMENT_LINK} from './defaults'\nimport {getLinkDeserialize} from './getLinkDeserialize'\nimport {WithLinkOptions} from './types'\nimport {withLink} from './withLink'\nimport {onKeyDown} from './transforms'\n\n/**\n * Enables support for hyperlinks.\n */\nexport const createLinkPlugin = (options?: WithLinkOptions): PlatePlugin => ({\n  pluginKeys: ELEMENT_LINK,\n  renderElement: getRenderElement(ELEMENT_LINK),\n  deserialize: getLinkDeserialize(),\n  inlineTypes: getPlatePluginTypes(ELEMENT_LINK),\n  withOverrides: withLink(options),\n  onKeyDown\n})\n"],"names":["ELEMENT_LINK","DEFAULTS_LINK","getNodeProps","element","url","getLinkDeserialize","editor","options","getPlatePluginOptions","getNodeDeserializer","type","getNode","el","getAttribute","rules","nodeNames","deserialize","wrapLink","at","wrapNodes","getPlatePluginType","children","split","upsertLinkAtSelection","wrap","selection","isCollapsed","insertNodes","text","linkLeaf","Editor","leaf","inlinePath","Transforms","select","unwrapNodes","match","collapse","edge","removeLink","upsertLink","newSelection","focus","upsertLinkIfValid","isUrl","rangeFromBlockStart","getRangeFromBlockStart","textFromBlockStart","getText","withLink","isUrlProtocol","rangeBeforeOptions","matchString","skipInvalid","afterMatch","multiPaths","insertData","insertText","beforeWordRange","getRangeBefore","beforeWordText","data","getData","someNode","withRemoveEmptyNodes","validateUrl","pattern","RegExp","test","onKeyDown","event","hotKey","getPluginHotkey","verifyHotkey","getClipboardText","then","isValid","createLinkPlugin","pluginKeys","renderElement","getRenderElement","inlineTypes","getPlatePluginTypes","withOverrides"],"mappings":"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"}