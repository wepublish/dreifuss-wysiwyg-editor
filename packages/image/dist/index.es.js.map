{"version":3,"file":"index.es.js","sources":["../src/defaults.ts","../src/getImageDeserialize.ts","../src/transforms/insertImage.ts","../src/utils/isImageUrl.ts","../src/withImageUpload.ts","../src/createImagePlugin.ts"],"sourcesContent":["export const ELEMENT_IMAGE = 'img'\n","import {getNodeDeserializer} from '@udecode/plate-common'\nimport {Deserialize, getPlatePluginOptions} from '@udecode/plate-core'\nimport {ELEMENT_IMAGE} from './defaults'\n\nexport const getImageDeserialize = (): Deserialize => editor => {\n  const options = getPlatePluginOptions(editor, ELEMENT_IMAGE)\n\n  return {\n    element: getNodeDeserializer({\n      type: options.type,\n      getNode: el => ({\n        type: options.type,\n        url: el.getAttribute('src')\n      }),\n      rules: [{nodeNames: 'IMG'}],\n      ...options.deserialize\n    })\n  }\n}\n","import {insertNodes} from '@udecode/plate-common'\nimport {getPlatePluginType, SPEditor, TElement} from '@udecode/plate-core'\nimport {ELEMENT_IMAGE} from '../defaults'\n\nexport const insertImage = (editor: SPEditor, url: string | ArrayBuffer) => {\n  const text = {text: ''}\n  const image = {\n    type: getPlatePluginType(editor, ELEMENT_IMAGE),\n    url,\n    children: [text]\n  }\n  insertNodes<TElement>(editor, image)\n  insertNodes<TElement>(editor, {type: 'paragraph', children: [text]})\n}\n","import {isUrl} from '@udecode/plate-common'\n\nconst imageExtensions = [\n  'ase',\n  'art',\n  'bmp',\n  'blp',\n  'cd5',\n  'cit',\n  'cpt',\n  'cr2',\n  'cut',\n  'dds',\n  'dib',\n  'djvu',\n  'egt',\n  'exif',\n  'gif',\n  'gpl',\n  'grf',\n  'icns',\n  'ico',\n  'iff',\n  'jng',\n  'jpeg',\n  'jpg',\n  'jfif',\n  'jp2',\n  'jps',\n  'lbm',\n  'max',\n  'miff',\n  'mng',\n  'msp',\n  'nitf',\n  'ota',\n  'pbm',\n  'pc1',\n  'pc2',\n  'pc3',\n  'pcf',\n  'pcx',\n  'pdn',\n  'pgm',\n  'PI1',\n  'PI2',\n  'PI3',\n  'pict',\n  'pct',\n  'pnm',\n  'pns',\n  'ppm',\n  'psb',\n  'psd',\n  'pdd',\n  'psp',\n  'px',\n  'pxm',\n  'pxr',\n  'qfx',\n  'raw',\n  'rle',\n  'sct',\n  'sgi',\n  'rgb',\n  'int',\n  'bw',\n  'tga',\n  'tiff',\n  'tif',\n  'vtf',\n  'xbm',\n  'xcf',\n  'xpm',\n  '3dv',\n  'amf',\n  'ai',\n  'awg',\n  'cgm',\n  'cdr',\n  'cmx',\n  'dxf',\n  'e2d',\n  'egt',\n  'eps',\n  'fs',\n  'gbr',\n  'odg',\n  'svg',\n  'stl',\n  'vrml',\n  'x3d',\n  'sxd',\n  'v2d',\n  'vnd',\n  'wmf',\n  'emf',\n  'art',\n  'xar',\n  'png',\n  'webp',\n  'jxr',\n  'hdp',\n  'wdp',\n  'cur',\n  'ecw',\n  'iff',\n  'lbm',\n  'liff',\n  'nrrd',\n  'pam',\n  'pcx',\n  'pgf',\n  'sgi',\n  'rgb',\n  'rgba',\n  'bw',\n  'int',\n  'inta',\n  'sid',\n  'ras',\n  'sun',\n  'tga'\n]\n\nexport const isImageUrl = (url: string) => {\n  if (!isUrl(url)) return false\n\n  const ext = new URL(url).pathname.split('.').pop() as string\n\n  return imageExtensions.includes(ext)\n}\n","import {SPEditor, WithOverride} from '@udecode/plate-core'\nimport {ReactEditor} from 'slate-react'\nimport {insertImage} from './transforms/insertImage'\nimport {isImageUrl} from './utils/isImageUrl'\nimport {WithImageUploadOptions} from './types'\n\n/**\n * Allows for pasting images from clipboard.\n * Not yet: dragging and dropping images, selecting them through a file system dialog.\n * @param options.type\n * @param options.uploadImage\n */\nexport const withImageUpload =\n  ({uploadImage}: WithImageUploadOptions = {}): WithOverride<ReactEditor & SPEditor> =>\n  editor => {\n    const {insertData} = editor\n\n    editor.insertData = (data: DataTransfer) => {\n      const text = data.getData('text/plain')\n      const {files} = data\n      if (files && files.length > 0) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        for (const file of files) {\n          const reader = new FileReader()\n          const [mime] = file.type.split('/')\n\n          if (mime === 'image') {\n            reader.addEventListener('load', async () => {\n              if (!reader.result) {\n                return\n              }\n              const uploadedUrl = uploadImage ? await uploadImage(reader.result) : reader.result\n\n              insertImage(editor, uploadedUrl)\n            })\n\n            reader.readAsDataURL(file)\n          }\n        }\n      } else if (isImageUrl(text)) {\n        insertImage(editor, text)\n      } else {\n        insertData(data)\n      }\n    }\n\n    return editor\n  }\n","import {getPlatePluginTypes, getRenderElement, PlatePlugin} from '@udecode/plate-core'\nimport {ELEMENT_IMAGE} from './defaults'\nimport {getImageDeserialize} from './getImageDeserialize'\nimport {WithImageUploadOptions} from './types'\nimport {withImageUpload} from './withImageUpload'\n\n/**\n * Enables support for images.\n */\nexport const createImagePlugin = (options?: WithImageUploadOptions): PlatePlugin => ({\n  pluginKeys: ELEMENT_IMAGE,\n  renderElement: getRenderElement(ELEMENT_IMAGE),\n  deserialize: getImageDeserialize(),\n  voidTypes: getPlatePluginTypes(ELEMENT_IMAGE),\n  withOverrides: withImageUpload(options)\n})\n"],"names":["ELEMENT_IMAGE","getImageDeserialize","editor","options","getPlatePluginOptions","element","getNodeDeserializer","type","getNode","el","url","getAttribute","rules","nodeNames","deserialize","insertImage","text","image","getPlatePluginType","children","insertNodes","imageExtensions","isImageUrl","isUrl","ext","URL","pathname","split","pop","includes","withImageUpload","uploadImage","insertData","data","getData","files","length","file","reader","FileReader","mime","addEventListener","result","uploadedUrl","readAsDataURL","createImagePlugin","pluginKeys","renderElement","getRenderElement","voidTypes","getPlatePluginTypes","withOverrides"],"mappings":"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"}