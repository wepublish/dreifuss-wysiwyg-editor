{"version":3,"file":"index.js","sources":["../src/defaults.ts","../src/getTableDeserialize.ts","../src/queries/getCellInNextTableRow.ts","../src/queries/getNextTableCell.ts","../src/queries/getCellInPreviousTableRow.ts","../src/queries/getPreviousTableCell.ts","../src/queries/getTableCellEntry.ts","../src/getTableOnKeyDown.ts","../src/withTable.ts","../src/createTablePlugin.ts","../src/utils/getEmptyCellNode.ts","../src/transforms/addColumn.ts","../src/utils/getEmptyRowNode.ts","../src/transforms/addRow.ts","../src/transforms/deleteColumn.ts","../src/transforms/deleteRow.ts","../src/transforms/deleteTable.ts","../src/utils/getEmptyTableNode.ts","../src/transforms/insertTable.ts","../src/transforms/upsertBgColorAtSelection.ts","../src/transforms/upsertBorderColorAtSelection.ts"],"sourcesContent":["import {PlatePluginOptions} from '@udecode/plate-core'\n\nexport const ELEMENT_TABLE = 'table'\nexport const ELEMENT_TH = 'th'\nexport const ELEMENT_TR = 'tr'\nexport const ELEMENT_TD = 'td'\n\nexport const KEYS_TABLE = [ELEMENT_TABLE, ELEMENT_TH, ELEMENT_TR, ELEMENT_TD]\n\nexport const DEFAULTS_TH: Partial<PlatePluginOptions> = {\n  getNodeProps: ({element}) => ({\n    colSpan: element?.attributes?.colspan,\n    rowSpan: element?.attributes?.rowspan\n  })\n}\n\nexport const DEFAULTS_TD: Partial<PlatePluginOptions> = {\n  getNodeProps: ({element}) => ({\n    colSpan: element?.attributes?.colspan,\n    rowSpan: element?.attributes?.rowspan\n  })\n}\n","import {getElementDeserializer} from '@udecode/plate-common'\nimport {Deserialize, getPlatePluginOptions} from '@udecode/plate-core'\nimport {ELEMENT_TABLE, ELEMENT_TD, ELEMENT_TH, ELEMENT_TR} from './defaults'\n\nexport const getTableDeserialize = (): Deserialize => editor => {\n  const table = getPlatePluginOptions(editor, ELEMENT_TABLE)\n  const td = getPlatePluginOptions(editor, ELEMENT_TD)\n  const th = getPlatePluginOptions(editor, ELEMENT_TH)\n  const tr = getPlatePluginOptions(editor, ELEMENT_TR)\n\n  return {\n    element: [\n      ...getElementDeserializer({\n        type: table.type,\n        rules: [{nodeNames: 'TABLE'}],\n        ...table.deserialize\n      }),\n      ...getElementDeserializer({\n        type: tr.type,\n        rules: [{nodeNames: 'TR'}],\n        ...tr.deserialize\n      }),\n      ...getElementDeserializer({\n        type: td.type,\n        attributeNames: ['rowspan', 'colspan'],\n        rules: [{nodeNames: 'TD'}],\n        ...td.deserialize\n      }),\n      ...getElementDeserializer({\n        type: th.type,\n        attributeNames: ['rowspan', 'colspan'],\n        rules: [{nodeNames: 'TH'}],\n        ...th.deserialize\n      })\n    ]\n  }\n}\n","import {TEditor} from '@udecode/plate-core'\nimport {Ancestor, Editor, NodeEntry, Path} from 'slate'\n\nexport function getCellInNextTableRow(\n  editor: TEditor,\n  currentRowPath: Path\n): NodeEntry | undefined {\n  try {\n    const nextRow = Editor.node(editor, Path.next(currentRowPath)) as NodeEntry<Ancestor>\n    // TODO: Many tables in rich text editors (Google Docs, Word),\n    // add a new row if we're in the last cell. Should we do the same?\n    const [nextRowNode, nextRowPath] = nextRow\n    const nextCell = nextRowNode?.children?.[0]\n    const nextCellPath = nextRowPath.concat(0)\n    if (nextCell && nextCellPath) {\n      return Editor.node(editor, nextCellPath)\n    }\n  } catch (err) {}\n}\n","import {TEditor} from '@udecode/plate-core'\nimport {Editor, NodeEntry, Path} from 'slate'\nimport {getCellInNextTableRow} from './getCellInNextTableRow'\n\nexport function getNextTableCell(\n  editor: TEditor,\n  currentCell: NodeEntry,\n  currentPath: Path,\n  currentRow: NodeEntry\n): NodeEntry | undefined {\n  try {\n    return Editor.node(editor, Path.next(currentPath))\n  } catch (err) {\n    const [, currentRowPath] = currentRow\n    return getCellInNextTableRow(editor, currentRowPath)\n  }\n}\n","import {TEditor} from '@udecode/plate-core'\nimport {Ancestor, Editor, NodeEntry, Path} from 'slate'\n\nexport function getCellInPreviousTableRow(\n  editor: TEditor,\n  currentRowPath: Path\n): NodeEntry | undefined {\n  try {\n    const previousRow = Editor.node(editor, Path.previous(currentRowPath)) as NodeEntry<Ancestor>\n    const [previousRowNode, previousRowPath] = previousRow\n    const previousCell = previousRowNode?.children?.[previousRowNode.children.length - 1]\n    const previousCellPath = previousRowPath.concat(previousRowNode.children.length - 1)\n    if (previousCell && previousCellPath) {\n      return Editor.node(editor, previousCellPath)\n    }\n  } catch (err) {}\n}\n","import {TEditor} from '@udecode/plate-core'\nimport {Editor, NodeEntry, Path} from 'slate'\nimport {getCellInPreviousTableRow} from './getCellInPreviousTableRow'\n\nexport function getPreviousTableCell(\n  editor: TEditor,\n  currentCell: NodeEntry,\n  currentPath: Path,\n  currentRow: NodeEntry\n): NodeEntry | undefined {\n  try {\n    return Editor.node(editor, Path.previous(currentPath))\n  } catch (err) {\n    const [, currentRowPath] = currentRow\n    return getCellInPreviousTableRow(editor, currentRowPath)\n  }\n}\n","import {getAbove, getParent, someNode} from '@udecode/plate-common'\nimport {getPlatePluginType, SPEditor} from '@udecode/plate-core'\nimport {Location} from 'slate'\nimport {ELEMENT_TD, ELEMENT_TR} from '../defaults'\n\n/**\n * If at (default = selection) is in table>tr>td, return table, tr, and td\n * node entries.\n */\nexport const getTableCellEntry = (\n  editor: SPEditor,\n  {at = editor.selection}: {at?: Location | null} = {}\n) => {\n  if (\n    at &&\n    someNode(editor, {\n      at,\n      match: {type: getPlatePluginType(editor, ELEMENT_TD)}\n    })\n  ) {\n    const selectionParent = getParent(editor, at)\n    if (!selectionParent) return\n    const [, paragraphPath] = selectionParent\n\n    const tableCell =\n      getAbove(editor, {\n        at,\n        match: {type: getPlatePluginType(editor, ELEMENT_TD)}\n      }) || getParent(editor, paragraphPath)\n\n    if (!tableCell) return\n    const [tableCellNode, tableCellPath] = tableCell\n\n    if (tableCellNode.type !== getPlatePluginType(editor, ELEMENT_TD)) return\n\n    const tableRow = getParent(editor, tableCellPath)\n    if (!tableRow) return\n    const [tableRowNode, tableRowPath] = tableRow\n\n    if (tableRowNode.type !== getPlatePluginType(editor, ELEMENT_TR)) return\n\n    const tableElement = getParent(editor, tableRowPath)\n    if (!tableElement) return\n\n    return {\n      tableElement,\n      tableRow,\n      tableCell\n    }\n  }\n}\n","import {getAbove} from '@udecode/plate-common'\nimport {getPlatePluginOptions, KeyboardHandler, SPEditor, TElement} from '@udecode/plate-core'\nimport {Transforms} from 'slate'\nimport {getNextTableCell} from './queries/getNextTableCell'\nimport {getPreviousTableCell} from './queries/getPreviousTableCell'\nimport {getTableCellEntry} from './queries/getTableCellEntry'\nimport {ELEMENT_TABLE} from './defaults'\n\nexport const getTableOnKeyDown =\n  <T extends SPEditor = SPEditor>(): KeyboardHandler<T> =>\n  editor =>\n  e => {\n    if (e.key === 'Tab') {\n      e.preventDefault()\n      const res = getTableCellEntry(editor, {})\n      if (!res) return\n      const {tableRow, tableCell} = res\n      const [, tableCellPath] = tableCell\n      const shiftTab = e.shiftKey\n      const tab = !e.shiftKey\n      if (shiftTab) {\n        // move left with shift+tab\n        const previousCell = getPreviousTableCell(editor, tableCell, tableCellPath, tableRow)\n        if (previousCell) {\n          const [, previousCellPath] = previousCell\n          Transforms.select(editor, previousCellPath)\n        }\n      } else if (tab) {\n        // move right with tab\n        const nextCell = getNextTableCell(editor, tableCell, tableCellPath, tableRow)\n        if (nextCell) {\n          const [, nextCellPath] = nextCell\n          Transforms.select(editor, nextCellPath)\n        }\n      }\n    }\n\n    // FIXME: would prefer this as mod+a, but doesn't work\n    if (e.key === 'a' && (e.metaKey || e.ctrlKey)) {\n      const options = getPlatePluginOptions(editor, ELEMENT_TABLE)\n\n      const res = getAbove<TElement>(editor, {match: {type: options.type}})\n      if (!res) return\n\n      const [, tablePath] = res\n\n      // select the whole table\n      Transforms.select(editor, tablePath)\n\n      e.preventDefault()\n      e.stopPropagation()\n    }\n  }\n","import {isCollapsed} from '@udecode/plate-common'\nimport {getPlatePluginType, isElement, SPEditor, TElement, WithOverride} from '@udecode/plate-core'\nimport {Editor, Node, Point, Transforms} from 'slate'\nimport {ELEMENT_TD} from './defaults'\n\nexport const withTable = (): WithOverride<SPEditor> => editor => {\n  const matchCells = (node: Node) => {\n    return (\n      isElement(node) &&\n      (node.type === getPlatePluginType(editor, ELEMENT_TD) ||\n        node.type === getPlatePluginType(editor, ELEMENT_TD))\n    )\n  }\n\n  const {deleteBackward, deleteForward, deleteFragment, insertText} = editor\n\n  const preventDeleteCell = (operation: any, pointCallback: any, nextPoint: any) => (unit: any) => {\n    const {selection} = editor\n\n    if (isCollapsed(selection)) {\n      const [cell] = Editor.nodes<TElement>(editor, {\n        match: matchCells\n      })\n      if (cell) {\n        // Prevent deletions within a cell\n        const [, cellPath] = cell\n        const start = pointCallback(editor, cellPath)\n\n        if (selection && Point.equals(selection.anchor, start)) {\n          return\n        }\n      } else {\n        // Prevent deleting cell when selection is before or after a table\n        const next = nextPoint(editor, selection, {unit})\n        const [nextCell] = Editor.nodes(editor, {\n          match: matchCells,\n          at: next\n        })\n        if (nextCell) return\n      }\n    }\n\n    operation(unit)\n  }\n\n  editor.deleteFragment = () => {\n    const {selection} = editor\n    const [start] = Editor.nodes(editor, {\n      match: matchCells,\n      at: selection?.anchor.path\n    })\n    const [end] = Editor.nodes(editor, {\n      match: matchCells,\n      at: selection?.focus.path\n    })\n    // Skip deletes if they start or end in a table cell, unless start & end in the same cell\n    if ((start || end) && start?.[0] !== end?.[0]) {\n      // Clear cells content\n      const cells = Editor.nodes(editor, {\n        match: matchCells\n      })\n      for (const [, path] of cells) {\n        for (const [, childPath] of Node.children(editor, path, {\n          reverse: true\n        })) {\n          Transforms.removeNodes(editor, {at: childPath})\n        }\n      }\n      Transforms.collapse(editor)\n      return\n    }\n    deleteFragment()\n  }\n\n  editor.insertText = text => {\n    const {selection} = editor\n    const [start] = Editor.nodes(editor, {\n      match: matchCells,\n      at: selection?.anchor.path\n    })\n    const [end] = Editor.nodes(editor, {\n      match: matchCells,\n      at: selection?.focus.path\n    })\n    // Collapse selection if multiple cells are selected to avoid breaking the table\n    if (!isCollapsed(selection) && (start || end) && start?.[0] !== end?.[0]) {\n      const [cell] = Editor.nodes(editor, {match: matchCells})\n      if (cell) {\n        Transforms.collapse(editor, {edge: 'end'})\n        insertText(text)\n        return\n      }\n    }\n    insertText(text)\n  }\n\n  // prevent deleting cells with deleteBackward\n  editor.deleteBackward = preventDeleteCell(deleteBackward, Editor.start, Editor.before)\n\n  // prevent deleting cells with deleteForward\n  editor.deleteForward = preventDeleteCell(deleteForward, Editor.end, Editor.after)\n\n  return editor\n}\n","import {getRenderElement, PlatePlugin} from '@udecode/plate-core'\nimport {KEYS_TABLE} from './defaults'\nimport {getTableDeserialize} from './getTableDeserialize'\nimport {getTableOnKeyDown} from './getTableOnKeyDown'\nimport {withTable} from './withTable'\n\n/**\n * Enables support for tables.\n */\nexport const createTablePlugin = (): PlatePlugin => ({\n  pluginKeys: KEYS_TABLE,\n  renderElement: getRenderElement(KEYS_TABLE),\n  deserialize: getTableDeserialize(),\n  onKeyDown: getTableOnKeyDown(),\n  withOverrides: withTable()\n})\n","import {ELEMENT_DEFAULT} from '@udecode/plate-common'\nimport {getPlatePluginType, SPEditor} from '@udecode/plate-core'\nimport {ELEMENT_TD} from '../defaults'\nimport {TablePluginOptions} from '../types'\n\nexport const getEmptyCellNode = (editor: SPEditor, {header}: TablePluginOptions) => {\n  return {\n    type: header ? getPlatePluginType(editor, ELEMENT_TD) : getPlatePluginType(editor, ELEMENT_TD),\n    children: [\n      {\n        type: getPlatePluginType(editor, ELEMENT_DEFAULT),\n        children: [{text: ''}]\n      }\n    ]\n  }\n}\n","import {getAbove, insertNodes, someNode} from '@udecode/plate-common'\nimport {getPlatePluginType, SPEditor, TElement} from '@udecode/plate-core'\nimport {Path} from 'slate'\nimport {ELEMENT_TABLE, ELEMENT_TD} from '../defaults'\nimport {TablePluginOptions} from '../types'\nimport {getEmptyCellNode} from '../utils/getEmptyCellNode'\n\nexport const addColumn = (editor: SPEditor, {header}: TablePluginOptions) => {\n  if (\n    someNode(editor, {\n      match: {type: getPlatePluginType(editor, ELEMENT_TABLE)}\n    })\n  ) {\n    const currentCellItem = getAbove(editor, {\n      match: {\n        type: [getPlatePluginType(editor, ELEMENT_TD), getPlatePluginType(editor, ELEMENT_TD)]\n      }\n    })\n\n    const currentTableItem = getAbove(editor, {\n      match: {type: getPlatePluginType(editor, ELEMENT_TABLE)}\n    })\n\n    if (currentCellItem && currentTableItem) {\n      const nextCellPath = Path.next(currentCellItem[1])\n      const newCellPath = nextCellPath.slice()\n      const replacePathPos = newCellPath.length - 2\n      const currentRowIdx = nextCellPath[replacePathPos]\n\n      currentTableItem[0].children.forEach((row, rowIdx) => {\n        newCellPath[replacePathPos] = rowIdx\n\n        insertNodes<TElement>(editor, getEmptyCellNode(editor, {header}), {\n          at: newCellPath,\n          select: rowIdx === currentRowIdx\n        })\n      })\n    }\n  }\n}\n","import {getPlatePluginType, SPEditor} from '@udecode/plate-core'\nimport {ELEMENT_TR} from '../defaults'\nimport {TablePluginOptions} from '../types'\nimport {getEmptyCellNode} from './getEmptyCellNode'\n\nexport const getEmptyRowNode = (\n  editor: SPEditor,\n  {header, colCount}: TablePluginOptions & {colCount: number}\n) => {\n  return {\n    type: getPlatePluginType(editor, ELEMENT_TR),\n    children: Array(colCount)\n      .fill(colCount)\n      .map(() => getEmptyCellNode(editor, {header}))\n  }\n}\n","import {getAbove, insertNodes, someNode} from '@udecode/plate-common'\nimport {getPlatePluginType, SPEditor, TElement} from '@udecode/plate-core'\nimport {Path} from 'slate'\nimport {ELEMENT_TABLE, ELEMENT_TR} from '../defaults'\nimport {TablePluginOptions} from '../types'\nimport {getEmptyRowNode} from '../utils/getEmptyRowNode'\n\nexport const addRow = (editor: SPEditor, {header}: TablePluginOptions) => {\n  if (\n    someNode(editor, {\n      match: {type: getPlatePluginType(editor, ELEMENT_TABLE)}\n    })\n  ) {\n    const currentRowItem = getAbove(editor, {\n      match: {type: getPlatePluginType(editor, ELEMENT_TR)}\n    })\n    if (currentRowItem) {\n      const [currentRowElem, currentRowPath] = currentRowItem\n      insertNodes<TElement>(\n        editor,\n        getEmptyRowNode(editor, {\n          header,\n          colCount: currentRowElem.children.length\n        }),\n        {\n          at: Path.next(currentRowPath),\n          select: true\n        }\n      )\n    }\n  }\n}\n","import {getAbove, someNode} from '@udecode/plate-common'\nimport {getPlatePluginType, SPEditor} from '@udecode/plate-core'\nimport {Transforms} from 'slate'\nimport {ELEMENT_TABLE, ELEMENT_TD, ELEMENT_TR} from '../defaults'\n\nexport const deleteColumn = (editor: SPEditor) => {\n  if (\n    someNode(editor, {\n      match: {type: getPlatePluginType(editor, ELEMENT_TABLE)}\n    })\n  ) {\n    const currentCellItem = getAbove(editor, {\n      match: {\n        type: [getPlatePluginType(editor, ELEMENT_TD), getPlatePluginType(editor, ELEMENT_TD)]\n      }\n    })\n    const currentRowItem = getAbove(editor, {\n      match: {type: getPlatePluginType(editor, ELEMENT_TR)}\n    })\n    const currentTableItem = getAbove(editor, {\n      match: {type: getPlatePluginType(editor, ELEMENT_TABLE)}\n    })\n\n    if (\n      currentCellItem &&\n      currentRowItem &&\n      currentTableItem &&\n      // Cannot delete the last cell\n      currentRowItem[0].children.length > 1\n    ) {\n      const currentCellPath = currentCellItem[1]\n      const pathToDelete = currentCellPath.slice()\n      const replacePathPos = pathToDelete.length - 2\n\n      currentTableItem[0].children.forEach((row, rowIdx) => {\n        pathToDelete[replacePathPos] = rowIdx\n\n        Transforms.removeNodes(editor, {\n          at: pathToDelete\n        })\n      })\n    }\n  }\n}\n","import {getAbove, someNode} from '@udecode/plate-common'\nimport {getPlatePluginType, SPEditor} from '@udecode/plate-core'\nimport {Transforms} from 'slate'\nimport {ELEMENT_TABLE, ELEMENT_TR} from '../defaults'\n\nexport const deleteRow = (editor: SPEditor) => {\n  if (\n    someNode(editor, {\n      match: {type: getPlatePluginType(editor, ELEMENT_TABLE)}\n    })\n  ) {\n    const currentTableItem = getAbove(editor, {\n      match: {type: getPlatePluginType(editor, ELEMENT_TABLE)}\n    })\n    const currentRowItem = getAbove(editor, {\n      match: {type: getPlatePluginType(editor, ELEMENT_TR)}\n    })\n    if (\n      currentRowItem &&\n      currentTableItem &&\n      // Cannot delete the last row\n      currentTableItem[0].children.length > 1\n    ) {\n      Transforms.removeNodes(editor, {\n        at: currentRowItem[1]\n      })\n    }\n  }\n}\n","import {getAbove, someNode} from '@udecode/plate-common'\nimport {getPlatePluginType, SPEditor} from '@udecode/plate-core'\nimport {Transforms} from 'slate'\nimport {ELEMENT_TABLE} from '../defaults'\n\nexport const deleteTable = (editor: SPEditor) => {\n  if (\n    someNode(editor, {\n      match: {type: getPlatePluginType(editor, ELEMENT_TABLE)}\n    })\n  ) {\n    const tableItem = getAbove(editor, {\n      match: {type: getPlatePluginType(editor, ELEMENT_TABLE)}\n    })\n    if (tableItem) {\n      Transforms.removeNodes(editor, {\n        at: tableItem[1]\n      })\n    }\n  }\n}\n","import {getPlatePluginType, SPEditor} from '@udecode/plate-core'\nimport {ELEMENT_TABLE} from '../defaults'\nimport {TablePluginOptions} from '../types'\nimport {getEmptyRowNode} from './getEmptyRowNode'\n\nexport const getEmptyTableNode = (editor: SPEditor, {header}: TablePluginOptions) => {\n  return {\n    type: getPlatePluginType(editor, ELEMENT_TABLE),\n    children: [\n      getEmptyRowNode(editor, {header, colCount: 2}),\n      getEmptyRowNode(editor, {header, colCount: 2})\n    ]\n  }\n}\n","import {insertNodes, someNode} from '@udecode/plate-common'\nimport {getPlatePluginType, SPEditor, TElement} from '@udecode/plate-core'\nimport {ELEMENT_TABLE} from '../defaults'\nimport {TablePluginOptions} from '../types'\nimport {getEmptyTableNode} from '../utils/getEmptyTableNode'\n\nexport const insertTable = (editor: SPEditor, {header}: TablePluginOptions) => {\n  if (\n    !someNode(editor, {\n      match: {type: getPlatePluginType(editor, ELEMENT_TABLE)}\n    })\n  ) {\n    insertNodes<TElement>(editor, getEmptyTableNode(editor, {header}))\n  }\n}\n","import {Editor, Element} from 'slate'\nimport {getPlatePluginType} from '@udecode/plate-core'\nimport {setNodes} from '@udecode/plate-common'\nimport {TEditor} from '@dreifuss-wysiwyg-editor/common'\nimport {ELEMENT_TABLE, ELEMENT_TD} from '../defaults'\n\nexport function upsertBgColor(editor: TEditor, backgroundColor: string) {\n  if (!editor?.selection || !backgroundColor) return\n\n  const tdType = getPlatePluginType(editor, ELEMENT_TD)\n  const tableType = getPlatePluginType(editor, ELEMENT_TABLE)\n\n  const nodes = Editor.nodes(editor, {\n    // @ts-ignore\n    match: node => Element.isElement(node) && node.type === tableType\n  })\n  for (const [, path] of nodes) {\n    setNodes(\n      editor,\n      {\n        backgroundColor\n      },\n      {\n        at: path,\n        match: node => node.type === tdType\n      }\n    )\n    return\n  }\n}\n","import {Editor, Element} from 'slate'\nimport {getPlatePluginType} from '@udecode/plate-core'\nimport {setNodes} from '@udecode/plate-common'\nimport {TEditor} from '@dreifuss-wysiwyg-editor/common'\nimport {ELEMENT_TABLE, ELEMENT_TD} from '../defaults'\n\nexport function upsertBorderColor(editor: TEditor, borderColor: string) {\n  if (!editor?.selection || !borderColor) return\n\n  const tdType = getPlatePluginType(editor, ELEMENT_TD)\n  const tableType = getPlatePluginType(editor, ELEMENT_TABLE)\n\n  const nodes = Editor.nodes(editor, {\n    // @ts-ignore\n    match: node => Element.isElement(node) && node.type === tableType\n  })\n  for (const [, path] of nodes) {\n    setNodes(\n      editor,\n      {\n        borderColor\n      },\n      {\n        at: path,\n        match: node => node.type === tdType\n      }\n    )\n    return\n  }\n}\n"],"names":["ELEMENT_TABLE","ELEMENT_TH","ELEMENT_TR","ELEMENT_TD","KEYS_TABLE","DEFAULTS_TH","getNodeProps","element","colSpan","attributes","colspan","rowSpan","rowspan","DEFAULTS_TD","getTableDeserialize","editor","table","getPlatePluginOptions","td","th","tr","getElementDeserializer","type","rules","nodeNames","deserialize","attributeNames","getCellInNextTableRow","currentRowPath","nextRow","Editor","node","Path","next","nextRowNode","nextRowPath","nextCell","children","nextCellPath","concat","err","getNextTableCell","currentCell","currentPath","currentRow","getCellInPreviousTableRow","previousRow","previous","previousRowNode","previousRowPath","previousCell","length","previousCellPath","getPreviousTableCell","getTableCellEntry","at","selection","someNode","match","getPlatePluginType","selectionParent","getParent","paragraphPath","tableCell","getAbove","tableCellNode","tableCellPath","tableRow","tableRowNode","tableRowPath","tableElement","getTableOnKeyDown","e","key","preventDefault","res","shiftTab","shiftKey","tab","Transforms","select","metaKey","ctrlKey","options","tablePath","stopPropagation","withTable","matchCells","isElement","deleteBackward","deleteForward","deleteFragment","insertText","preventDeleteCell","operation","pointCallback","nextPoint","unit","isCollapsed","cell","nodes","cellPath","start","Point","equals","anchor","path","end","focus","cells","childPath","Node","reverse","removeNodes","collapse","text","edge","before","after","createTablePlugin","pluginKeys","renderElement","getRenderElement","onKeyDown","withOverrides","getEmptyCellNode","header","ELEMENT_DEFAULT","addColumn","currentCellItem","currentTableItem","newCellPath","slice","replacePathPos","currentRowIdx","forEach","row","rowIdx","insertNodes","getEmptyRowNode","colCount","Array","fill","map","addRow","currentRowItem","currentRowElem","deleteColumn","currentCellPath","pathToDelete","deleteRow","deleteTable","tableItem","getEmptyTableNode","insertTable","upsertBgColor","backgroundColor","tdType","tableType","Element","setNodes","upsertBorderColor","borderColor"],"mappings":"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"}